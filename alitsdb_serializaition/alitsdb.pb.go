// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: alitsdb.proto

package com_alibaba_tsdb_service_api

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// for data generation
type MultifieldPoint struct {
	Timestamp            int64              `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Serieskey            string             `protobuf:"bytes,2,opt,name=serieskey,proto3" json:"serieskey,omitempty"`
	Fields               map[string]float64 `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"fixed64,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *MultifieldPoint) Reset()         { *m = MultifieldPoint{} }
func (m *MultifieldPoint) String() string { return proto.CompactTextString(m) }
func (*MultifieldPoint) ProtoMessage()    {}
func (*MultifieldPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ca79f1ca873329, []int{0}
}
func (m *MultifieldPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MultifieldPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MultifieldPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MultifieldPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MultifieldPoint.Merge(m, src)
}
func (m *MultifieldPoint) XXX_Size() int {
	return m.Size()
}
func (m *MultifieldPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MultifieldPoint.DiscardUnknown(m)
}

var xxx_messageInfo_MultifieldPoint proto.InternalMessageInfo

func (m *MultifieldPoint) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MultifieldPoint) GetSerieskey() string {
	if m != nil {
		return m.Serieskey
	}
	return ""
}

func (m *MultifieldPoint) GetFields() map[string]float64 {
	if m != nil {
		return m.Fields
	}
	return nil
}

// for mput request
type MputPoint struct {
	Timestamp            int64     `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Serieskey            string    `protobuf:"bytes,2,opt,name=serieskey,proto3" json:"serieskey,omitempty"`
	Fvalues              []float64 `protobuf:"fixed64,3,rep,packed,name=fvalues,proto3" json:"fvalues,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *MputPoint) Reset()         { *m = MputPoint{} }
func (m *MputPoint) String() string { return proto.CompactTextString(m) }
func (*MputPoint) ProtoMessage()    {}
func (*MputPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ca79f1ca873329, []int{1}
}
func (m *MputPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MputPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MputPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MputPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MputPoint.Merge(m, src)
}
func (m *MputPoint) XXX_Size() int {
	return m.Size()
}
func (m *MputPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MputPoint.DiscardUnknown(m)
}

var xxx_messageInfo_MputPoint proto.InternalMessageInfo

func (m *MputPoint) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *MputPoint) GetSerieskey() string {
	if m != nil {
		return m.Serieskey
	}
	return ""
}

func (m *MputPoint) GetFvalues() []float64 {
	if m != nil {
		return m.Fvalues
	}
	return nil
}

type MputRequest struct {
	Fnames               []string     `protobuf:"bytes,1,rep,name=fnames,proto3" json:"fnames,omitempty"`
	Points               []*MputPoint `protobuf:"bytes,2,rep,name=points,proto3" json:"points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MputRequest) Reset()         { *m = MputRequest{} }
func (m *MputRequest) String() string { return proto.CompactTextString(m) }
func (*MputRequest) ProtoMessage()    {}
func (*MputRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ca79f1ca873329, []int{2}
}
func (m *MputRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MputRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MputRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MputRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MputRequest.Merge(m, src)
}
func (m *MputRequest) XXX_Size() int {
	return m.Size()
}
func (m *MputRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_MputRequest.DiscardUnknown(m)
}

var xxx_messageInfo_MputRequest proto.InternalMessageInfo

func (m *MputRequest) GetFnames() []string {
	if m != nil {
		return m.Fnames
	}
	return nil
}

func (m *MputRequest) GetPoints() []*MputPoint {
	if m != nil {
		return m.Points
	}
	return nil
}

type MputResponse struct {
	Ret                  bool     `protobuf:"varint,1,opt,name=ret,proto3" json:"ret,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *MputResponse) Reset()         { *m = MputResponse{} }
func (m *MputResponse) String() string { return proto.CompactTextString(m) }
func (*MputResponse) ProtoMessage()    {}
func (*MputResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d8ca79f1ca873329, []int{3}
}
func (m *MputResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MputResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MputResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MputResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MputResponse.Merge(m, src)
}
func (m *MputResponse) XXX_Size() int {
	return m.Size()
}
func (m *MputResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MputResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MputResponse proto.InternalMessageInfo

func (m *MputResponse) GetRet() bool {
	if m != nil {
		return m.Ret
	}
	return false
}

func init() {
	proto.RegisterType((*MultifieldPoint)(nil), "com.alibaba.tsdb.service.api.MultifieldPoint")
	proto.RegisterMapType((map[string]float64)(nil), "com.alibaba.tsdb.service.api.MultifieldPoint.FieldsEntry")
	proto.RegisterType((*MputPoint)(nil), "com.alibaba.tsdb.service.api.MputPoint")
	proto.RegisterType((*MputRequest)(nil), "com.alibaba.tsdb.service.api.MputRequest")
	proto.RegisterType((*MputResponse)(nil), "com.alibaba.tsdb.service.api.MputResponse")
}

func init() { proto.RegisterFile("alitsdb.proto", fileDescriptor_d8ca79f1ca873329) }

var fileDescriptor_d8ca79f1ca873329 = []byte{
	// 346 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x52, 0xcd, 0x4a, 0xeb, 0x40,
	0x14, 0xee, 0x34, 0xf7, 0xe6, 0xde, 0x9c, 0x2a, 0x96, 0x41, 0x25, 0x94, 0x12, 0x42, 0x36, 0x46,
	0x17, 0xb3, 0xa8, 0x1b, 0xeb, 0x46, 0x10, 0x74, 0x57, 0xa8, 0xe3, 0x03, 0xc8, 0xa4, 0x9d, 0xc0,
	0x60, 0x7e, 0xc6, 0xcc, 0xa4, 0xd8, 0x37, 0xf1, 0x91, 0x5c, 0xba, 0x77, 0x23, 0xf5, 0x45, 0x64,
	0x26, 0x29, 0x15, 0x17, 0x56, 0x70, 0x77, 0xce, 0x97, 0x9c, 0xef, 0x8f, 0x81, 0x5d, 0x96, 0x09,
	0xad, 0xe6, 0x09, 0x91, 0x55, 0xa9, 0x4b, 0x3c, 0x9c, 0x95, 0x39, 0x61, 0x99, 0x48, 0x58, 0xc2,
	0x88, 0xc5, 0x15, 0xaf, 0x16, 0x62, 0xc6, 0x09, 0x93, 0x22, 0x7a, 0x45, 0xb0, 0x37, 0xa9, 0x33,
	0x2d, 0x52, 0xc1, 0xb3, 0xf9, 0xb4, 0x14, 0x85, 0xc6, 0x43, 0xf0, 0xb4, 0xc8, 0xb9, 0xd2, 0x2c,
	0x97, 0x3e, 0x0a, 0x51, 0xec, 0xd0, 0x0d, 0x60, 0xbe, 0x2a, 0x5e, 0x09, 0xae, 0xee, 0xf9, 0xd2,
	0xef, 0x86, 0x28, 0xf6, 0xe8, 0x06, 0xc0, 0x37, 0xe0, 0x5a, 0x26, 0xe5, 0x3b, 0xa1, 0x13, 0xf7,
	0x46, 0x63, 0xf2, 0x9d, 0x3c, 0xf9, 0x22, 0x4d, 0xae, 0xed, 0xed, 0x55, 0xa1, 0xab, 0x25, 0x6d,
	0x89, 0x06, 0x63, 0xe8, 0x7d, 0x82, 0x71, 0x1f, 0x1c, 0xa3, 0x8c, 0xac, 0xb2, 0x19, 0xf1, 0x3e,
	0xfc, 0x5d, 0xb0, 0xac, 0xe6, 0xd6, 0x0d, 0xa2, 0xcd, 0x72, 0xde, 0x3d, 0x43, 0x11, 0x03, 0x6f,
	0x22, 0x6b, 0xfd, 0xfb, 0x58, 0x3e, 0xfc, 0x4b, 0x2d, 0x6d, 0x93, 0x0b, 0xd1, 0xf5, 0x1a, 0xa5,
	0xd0, 0x33, 0x12, 0x94, 0x3f, 0xd4, 0x5c, 0x69, 0x7c, 0x08, 0x6e, 0x5a, 0xb0, 0x9c, 0x2b, 0x1f,
	0x85, 0x4e, 0xec, 0xd1, 0x76, 0xc3, 0x17, 0xe0, 0x4a, 0xe3, 0x42, 0xf9, 0x5d, 0xdb, 0xcb, 0xd1,
	0x96, 0x5e, 0xd6, 0xae, 0x69, 0x7b, 0x16, 0x85, 0xb0, 0xd3, 0xe8, 0x28, 0x59, 0x16, 0x8a, 0x9b,
	0x1a, 0x2a, 0xae, 0x6d, 0x8e, 0xff, 0xd4, 0x8c, 0xa3, 0x47, 0x38, 0xb0, 0x75, 0x36, 0x65, 0x4d,
	0x6b, 0x7d, 0xdb, 0x10, 0xe2, 0x3b, 0xf8, 0x93, 0xcb, 0x5a, 0xe3, 0xe3, 0xed, 0x9a, 0x6d, 0x8c,
	0xc1, 0xc9, 0x4f, 0x7e, 0x6d, 0x9c, 0x44, 0x9d, 0xcb, 0xfe, 0xf3, 0x2a, 0x40, 0x2f, 0xab, 0x00,
	0xbd, 0xad, 0x02, 0xf4, 0xf4, 0x1e, 0x74, 0x12, 0xd7, 0xbe, 0xbd, 0xd3, 0x8f, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x0a, 0x10, 0xb7, 0xe1, 0x8c, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MultiFieldsPutServiceClient is the client API for MultiFieldsPutService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MultiFieldsPutServiceClient interface {
	Mput(ctx context.Context, in *MputRequest, opts ...grpc.CallOption) (*MputResponse, error)
}

type multiFieldsPutServiceClient struct {
	cc *grpc.ClientConn
}

func NewMultiFieldsPutServiceClient(cc *grpc.ClientConn) MultiFieldsPutServiceClient {
	return &multiFieldsPutServiceClient{cc}
}

func (c *multiFieldsPutServiceClient) Mput(ctx context.Context, in *MputRequest, opts ...grpc.CallOption) (*MputResponse, error) {
	out := new(MputResponse)
	err := c.cc.Invoke(ctx, "/com.alibaba.tsdb.service.api.MultiFieldsPutService/mput", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MultiFieldsPutServiceServer is the server API for MultiFieldsPutService service.
type MultiFieldsPutServiceServer interface {
	Mput(context.Context, *MputRequest) (*MputResponse, error)
}

// UnimplementedMultiFieldsPutServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMultiFieldsPutServiceServer struct {
}

func (*UnimplementedMultiFieldsPutServiceServer) Mput(ctx context.Context, req *MputRequest) (*MputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mput not implemented")
}

func RegisterMultiFieldsPutServiceServer(s *grpc.Server, srv MultiFieldsPutServiceServer) {
	s.RegisterService(&_MultiFieldsPutService_serviceDesc, srv)
}

func _MultiFieldsPutService_Mput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MultiFieldsPutServiceServer).Mput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.alibaba.tsdb.service.api.MultiFieldsPutService/Mput",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MultiFieldsPutServiceServer).Mput(ctx, req.(*MputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MultiFieldsPutService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.alibaba.tsdb.service.api.MultiFieldsPutService",
	HandlerType: (*MultiFieldsPutServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "mput",
			Handler:    _MultiFieldsPutService_Mput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "alitsdb.proto",
}

func (m *MultifieldPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MultifieldPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MultifieldPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fields) > 0 {
		for k := range m.Fields {
			v := m.Fields[k]
			baseI := i
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(v))))
			i--
			dAtA[i] = 0x11
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintAlitsdb(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintAlitsdb(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Serieskey) > 0 {
		i -= len(m.Serieskey)
		copy(dAtA[i:], m.Serieskey)
		i = encodeVarintAlitsdb(dAtA, i, uint64(len(m.Serieskey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintAlitsdb(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MputPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MputPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MputPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Fvalues) > 0 {
		for iNdEx := len(m.Fvalues) - 1; iNdEx >= 0; iNdEx-- {
			f1 := math.Float64bits(float64(m.Fvalues[iNdEx]))
			i -= 8
			encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(f1))
		}
		i = encodeVarintAlitsdb(dAtA, i, uint64(len(m.Fvalues)*8))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Serieskey) > 0 {
		i -= len(m.Serieskey)
		copy(dAtA[i:], m.Serieskey)
		i = encodeVarintAlitsdb(dAtA, i, uint64(len(m.Serieskey)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = encodeVarintAlitsdb(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MputRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MputRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MputRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Points) > 0 {
		for iNdEx := len(m.Points) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Points[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintAlitsdb(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Fnames) > 0 {
		for iNdEx := len(m.Fnames) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Fnames[iNdEx])
			copy(dAtA[i:], m.Fnames[iNdEx])
			i = encodeVarintAlitsdb(dAtA, i, uint64(len(m.Fnames[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MputResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MputResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MputResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ret {
		i--
		if m.Ret {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAlitsdb(dAtA []byte, offset int, v uint64) int {
	offset -= sovAlitsdb(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MultifieldPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovAlitsdb(uint64(m.Timestamp))
	}
	l = len(m.Serieskey)
	if l > 0 {
		n += 1 + l + sovAlitsdb(uint64(l))
	}
	if len(m.Fields) > 0 {
		for k, v := range m.Fields {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovAlitsdb(uint64(len(k))) + 1 + 8
			n += mapEntrySize + 1 + sovAlitsdb(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MputPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + sovAlitsdb(uint64(m.Timestamp))
	}
	l = len(m.Serieskey)
	if l > 0 {
		n += 1 + l + sovAlitsdb(uint64(l))
	}
	if len(m.Fvalues) > 0 {
		n += 1 + sovAlitsdb(uint64(len(m.Fvalues)*8)) + len(m.Fvalues)*8
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MputRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fnames) > 0 {
		for _, s := range m.Fnames {
			l = len(s)
			n += 1 + l + sovAlitsdb(uint64(l))
		}
	}
	if len(m.Points) > 0 {
		for _, e := range m.Points {
			l = e.Size()
			n += 1 + l + sovAlitsdb(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MputResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ret {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAlitsdb(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAlitsdb(x uint64) (n int) {
	return sovAlitsdb(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MultifieldPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlitsdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MultifieldPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MultifieldPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serieskey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlitsdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serieskey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlitsdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Fields == nil {
				m.Fields = make(map[string]float64)
			}
			var mapkey string
			var mapvalue float64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlitsdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAlitsdb
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthAlitsdb
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthAlitsdb
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					mapvaluetemp = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					mapvalue = math.Float64frombits(mapvaluetemp)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAlitsdb(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAlitsdb
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Fields[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlitsdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MputPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlitsdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MputPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MputPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serieskey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlitsdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Serieskey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 1 {
				var v uint64
				if (iNdEx + 8) > l {
					return io.ErrUnexpectedEOF
				}
				v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
				iNdEx += 8
				v2 := float64(math.Float64frombits(v))
				m.Fvalues = append(m.Fvalues, v2)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAlitsdb
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthAlitsdb
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthAlitsdb
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				elementCount = packedLen / 8
				if elementCount != 0 && len(m.Fvalues) == 0 {
					m.Fvalues = make([]float64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					if (iNdEx + 8) > l {
						return io.ErrUnexpectedEOF
					}
					v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
					iNdEx += 8
					v2 := float64(math.Float64frombits(v))
					m.Fvalues = append(m.Fvalues, v2)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Fvalues", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAlitsdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MputRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlitsdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MputRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MputRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fnames", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAlitsdb
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fnames = append(m.Fnames, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Points", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAlitsdb
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Points = append(m.Points, &MputPoint{})
			if err := m.Points[len(m.Points)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAlitsdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MputResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAlitsdb
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MputResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MputResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ret", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ret = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipAlitsdb(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAlitsdb
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAlitsdb(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAlitsdb
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAlitsdb
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAlitsdb
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAlitsdb
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAlitsdb
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAlitsdb        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAlitsdb          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAlitsdb = fmt.Errorf("proto: unexpected end of group")
)
